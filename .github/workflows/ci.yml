name: CI DevSecOps

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_TAG: ghcr.io/${{ github.repository }}:${{ github.sha }}
  IMAGE_LATEST: ghcr.io/${{ github.repository }}:latest

jobs:
  lint:
    name: Lint (flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install flake8
      - run: flake8 app --max-line-length=100

  test:
    name: Unit tests (pytest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install -r requirements.txt pytest
      - run: pytest -q --junitxml=pytest-report.xml
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-report
          path: pytest-report.xml

  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.python.version=3.11
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.qualitygate.wait=true

  deps_audit:
    name: Dependency Audit (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install -r requirements.txt pip-audit
      - run: pip-audit -r requirements.txt -f json -o pip-audit.json || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit
          path: pip-audit.json

  build_push:
    name: Build & Push Image (GHCR)
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_LATEST }}
          push: true

  image_scan:
    name: Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_TAG }}
          format: 'json'
          output: 'trivy-image.json'
          exit-code: '0'
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-image
          path: trivy-image.json

  dast:
    name: DAST (OWASP ZAP Baseline)
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run app container
        run: |
          docker pull ${{ env.IMAGE_TAG }}
          docker run -d --name app -p 5000:5000 ${{ env.IMAGE_TAG }}
          for i in $(seq 1 30); do
            if curl -fsS http://127.0.0.1:5000/health >/dev/null; then echo "App ready"; break; fi; sleep 2;
          done
      - name: ZAP Baseline Scan
        run: |
          mkdir -p dast-report
          docker run --rm --network host -v "$PWD/dast-report":/zap/wrk \
            owasp/zap2docker-stable zap-baseline.py \
            -t http://127.0.0.1:5000 -r zap-report.html -x zap-report.xml || true
          docker stop app && docker rm app
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-dast
          path: dast-report/*
